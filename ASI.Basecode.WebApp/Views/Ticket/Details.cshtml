@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ASI.Basecode.Services.ServiceModels.TicketViewModel
@await Html.PartialAsync("_FeedbackModal", Model.TicketId)
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://unpkg.com/flowbite@1.4.7/dist/flowbite.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<script src="https://unpkg.com/flowbite@1.4.7/dist/flowbite.js"></script>


<div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-3" style="margin-top: 15px;">
    <div class="bg-none rounded-md col-span-2">
        
        <div class="tickets-container" style="font-size: 0.85rem;">



            <div class="card" style="margin-bottom: 0.75rem;">
                <div class="card-header d-flex justify-content-between align-items-center py-2">
                    <h4 style="margin: 0; font-size: 1rem;">@Model.Title</h4>
                    <div>
                        @if (Model.Status != "Resolved")
                        {
                            <button class="btn custom-btn violet-btn" onclick="markAsResolved()">Mark as Resolved</button>
                            <button class="btn custom-btn blue-btn" onclick="editMode()">Edit</button>
                        }
                        <a href="/Ticket/Tickets" class="btn custom-btn blu-btn text-sm h-6 w-34">Back to List</a>
                    </div>

                </div>
                <div class="card-body" style="padding: 0.5rem; max-height: 150px; overflow-y: auto;">
                    <div id="viewMode">
                        <div class="row">
                            <div class="col-md-6">
                                <p style="margin-bottom: 0.25rem;"><strong>Status:</strong> @Model.Status</p>
                                <p style="margin-bottom: 0.25rem;"><strong>Priority:</strong> @Model.Priority</p>
                                <p style="margin-bottom: 0.25rem;"><strong>Category:</strong> @Model.Category</p>
                            </div>
                            <div class="col-md-6">
                                <p style="margin-bottom: 0.25rem;"><strong>Created On:</strong> @Model.CreatedOn.ToString("g")</p>
                                <p style="margin-bottom: 0.25rem;"><strong>Created By:</strong> @Model.CreatedByName</p>
                                @if (Model.ResolvedOn.HasValue)
                                {
                                    <p style="margin-bottom: 0.25rem;"><strong>Resolved On:</strong> @Model.ResolvedOn.Value.ToString("g")</p>
                                }
                            </div>
                        </div>
                        <div class="mt-3">
                            <h5 style="font-size: 0.9rem; margin-bottom: 0.5rem;">Description</h5>
                            <p style="margin-bottom: 0;">@Model.Content</p>
                        </div>
                    </div>

                    <div id="editMode" style="display: none;">
                        <form id="editTicketForm">
                            <input type="hidden" name="TicketId" value="@Model.TicketId" />
                            <div class="form-group">
                                <label for="Title" style="font-size: 0.9rem;">Title</label>
                                <input name="Title" id="Title" class="form-control" value="@Model.Title" required />
                            </div>
                            <div class="form-group">
                                <label for="Content" style="font-size: 0.9rem;">Description</label>
                                <textarea name="Content" id="Content" class="form-control" rows="4" required>@Model.Content</textarea>
                            </div>
                            <div class="form-group">
                                <label for="Category" style="font-size: 0.9rem;">Category</label>
                                <select name="Category" id="Category" class="form-control" required>
                                    <option value="Bug" selected="@(Model.Category == "Bug")">Bug</option>
                                    <option value="Feature" selected="@(Model.Category == "Feature")">Feature Request</option>
                                    <option value="Support" selected="@(Model.Category == "Support")">Support</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Priority" style="font-size: 0.9rem;">Priority</label>
                                <select name="Priority" id="Priority" class="form-control" required>
                                    <option value="1" selected="@(Model.Priority == 1)">Low</option>
                                    <option value="2" selected="@(Model.Priority == 2)">Medium</option>
                                    <option value="3" selected="@(Model.Priority == 3)">High</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="Status" style="font-size: 0.9rem;">Status</label>
                                <select name="Status" id="Status" class="form-control" required>
                                    <option value="Open" selected="@(Model.Status == "Open")">Open</option>
                                    <option value="In Progress" selected="@(Model.Status == "In Progress")">In Progress</option>
                                    <option value="Resolved" selected="@(Model.Status == "Resolved")">Resolved</option>
                                </select>
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                                <button type="button" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        <!-- Updates History -->
        <div class="card mt-1">
            <div class="card-header" >
                <h4>Update History</h4>
            </div>
            <div class="card-body" style="max-height: 200px; overflow-y: auto;">
                <div id="updatesList">
                    <!-- Updates will be loaded here -->
                </div>
            </div>
        </div>
        <!-- Attachments -->
        <div class="card mt-3" style="font-size: 0.85rem;">
            <div class="card-header d-flex justify-content-between align-items-center" style="padding: 0.5rem;">
                <h5 style="margin: 0; font-size: 1rem;">Attachments</h5>
                @if (Model.Status != "Resolved")
                {
                    <div>
                        <input type="file" id="attachmentInput" class="d-none" multiple />
                        <button class="btn btn-primary btn-sm" onclick="$('#attachmentInput').click()">
                            <i class="fas fa-plus"></i> Add Attachments
                        </button>
                    </div>
                }
            </div>
            <div class="card-body" style="padding: 0.5rem; max-height: 200px; overflow-y: auto;">
                <div id="attachmentsList">
                    <!-- Attachments will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <div class="bg-white border border-gray-100 shadow-md shadow-black/5 p-6 rounded-md col-span-1">
        <div class="flex justify-between mb-4 items-start">
            <div class="font-medium">C o m m e n t s</div>
        </div>
        <div class="comments-container">
            <div class="card">
                <div class="card-body comments-list flex-grow h-full">
                    <div id="commentsList" style="height: 100vh; max-height: 400px; overflow-y: auto;">
                        <!-- Comments will be loaded here -->
                    </div>
                    <div class="comment-form" style="margin-top: 10px;">
                        <form id="addCommentForm">
                            <input type="hidden" name="TicketId" value="@Model.TicketId" />
                            <div class="form-group">
                                <textarea name="Comment"
                                          class="form-control"
                                          rows="3"
                                          placeholder="Add a comment..."
                                          style="
                                          resize: none;
                                          background-color: #fefefe;
                                          color: #333;
                                          border: 1px solid #ccc;
                                          padding: 10px;
                                          width: 100%;
                                        "
                                        required></textarea>
                            </div>
                            <button type="submit"
                                    class="btn"
                                    style="background-color: #4682b4;
                                    color: #fff;
                                    border: none;
                                    padding: 10px 15px;
                                    cursor: pointer;
                                    float: right;
                                    border-radius: 10px;">
                                Send
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        

    </div>


</div>

@section Scripts {
    <script>
        function editMode() {
            $('#viewMode').hide();
            $('#editMode').show();
        }

        function cancelEdit() {
            $('#editMode').hide();
            $('#viewMode').show();
        }

        $('#editTicketForm').submit(function(e) {
            e.preventDefault();
            var oldStatus = '@Model.Status';
            var oldPriority = '@Model.Priority';
            var newStatus = $('#Status').val();
            var newPriority = $('#Priority').val();
            
            
            $.ajax({
                url: '/Ticket/EditTicket',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    if (response.success) {
                        if (oldStatus !== newStatus || oldPriority !== newPriority) {
                            loadUpdates();
                        }
                        location.reload();
                    } else {
                        toastr.error(response.message || 'Failed to update ticket');
                    }
                },
                error: function() {
                    toastr.error('An error occurred while updating the ticket');
                }
            });
        });

        function loadComments() {
            $.get('/Comment/GetTicketComments', { ticketId: @Model.TicketId }, function(comments) {
                var html = '';
                comments.forEach(function(comment) {
                    html += `
                        <div class="comment-item mb-3">
                            <div class="d-flex justify-content-between align-items-start">
                                <div>
                                    <strong>${comment.userName}</strong>
                                    <small class="text-muted ml-2" style="font-size: 11px;">${new Date(comment.commentedOn).toLocaleString()}</small>
                                </div>
                                <button  onclick="deleteComment(${comment.commentId})">
                                    <i class="fas fa-trash" style="font-size: 12px; margin-right: 7px; color: red;"></i>
                                </button>
                            </div>
                            <p class="mb-0 mt-2">${comment.comment}</p>
                            <hr>
                        </div>
                    `;
                });
                $('#commentsList').html(html);
                // Scroll to bottom of comments list after loading
                var commentsList = document.getElementById('commentsList');
                commentsList.scrollTop = commentsList.scrollHeight;
            });
        }

        $(document).ready(function() {
            loadComments();

            $('#addCommentForm').submit(function(e) {
                e.preventDefault();
                $.ajax({
                    url: '/Comment/AddComment',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            loadComments();
                            $('textarea[name="Comment"]').val('');
                        } else {
                            toastr.error(response.message || 'Failed to add comment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while adding the comment');
                    }
                });
            });

            loadUpdates();

            loadAttachments();

            $('#attachmentInput').change(function(e) {
                if ('@Model.Status' === 'Resolved') {
                    toastr.error('Cannot add attachments to resolved tickets');
                    $(this).val('');
                    return;
                }
                
                const files = e.target.files;
                if (files.length > 0) {
                    const formData = new FormData();
                    formData.append('ticketId', @Model.TicketId);
                    
                    for (let i = 0; i < files.length; i++) {
                        formData.append('file', files[i]);
                    }

                    $.ajax({
                        url: '/Attachment/Upload',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function(response) {
                            if (response.success) {
                                loadAttachments();
                                $(this).val('');
                            } else {
                                toastr.error(response.message || 'Failed to upload attachment');
                            }
                        },
                        error: function() {
                            toastr.error('An error occurred while uploading the attachment');
                        }
                    });
                }
            });

            if ('@Model.Status' === 'Resolved') {
                checkAndShowFeedback();
            }
        });

        function deleteComment(commentId) {
            if (confirm('Are you sure you want to delete this comment?')) {
                $.ajax({
                    url: '/Comment/DeleteComment',
                    type: 'POST',
                    data: { commentId: commentId },
                    success: function(response) {
                        if (response.success) {
                            loadComments();
                        } else {
                            toastr.error(response.message || 'Failed to delete comment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while deleting the comment');
                    }
                });
            }
        }

        function loadUpdates() {
            $.get('/Update/GetTicketUpdates', { ticketId: @Model.TicketId }, function(updates) {
                var html = '';
                updates.forEach(function(update) {
                    html += `
                        <div class="update-item mb-1">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="status-priority text-center">
                                    <strong>${update.updatedByName}</strong>
                                            
                                                <small class="text-muted ml-2" style="font-size: 11px;">${new Date(update.updatedOn).toLocaleString()}</small>
                                </div>
                            </div>
                            <p>${update.message}</p>
                            <div class="mb-2">
                                ${update.status ? `<small class="text-muted">Status: ${update.status}</small>` : ''}
                                ${update.priority ? `<small class="text-muted ml-2">Priority: ${update.priority}</small>` : ''}
                            </div>
                                    
                            <hr>
                        </div>
                    `;
                });
                $('#updatesList').html(html);
            });
        }

        function loadAttachments() {
            $.get('/Attachment/GetTicketAttachments', { ticketId: @Model.TicketId }, function(attachments) {
                var html = '';
                attachments.forEach(function(attachment) {
                    const isImage = attachment.filetype.startsWith('image/');
                    
                    html += `
                        <div class="attachment-item mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    ${isImage ? 
                                        `<div class="mr-3">
                                            <img src="${attachment.source}" alt="${attachment.filename}" 
                                                 style="max-width: 150px; max-height: 150px; object-fit: contain;" 
                                                 class="img-thumbnail"/>
                                        </div>` : 
                                        `<i class="fas fa-paperclip mr-2"></i>`
                                    }
                                    <div>
                                        <a href="${attachment.source}" target="_blank" class="text-decoration-none">
                                            ${attachment.filename}
                                        </a>
                                        <small class="text-muted d-block">${formatFileSize(attachment.filesize)}</small>
                                    </div>
                                </div>
                                <button onclick="deleteAttachment(${attachment.attachmentId})">
                                    <i class="fas fa-trash" style="font-size: 12px; margin-right: 7px; color: red;"></i>
                                </button>
                            </div>
                        </div>
                    `;
                });
                $('#attachmentsList').html(html || '<p>No attachments</p>');
            });
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function deleteAttachment(attachmentId) {
            if ('@Model.Status' === 'Resolved') {
                toastr.error('Cannot delete attachments for resolved tickets');
                return;
            }
            
            if (confirm('Are you sure you want to delete this attachment?')) {
                $.ajax({
                    url: '/Attachment/Delete',
                    type: 'POST',
                    data: { attachmentId: attachmentId },
                    success: function(response) {
                        if (response.success) {
                            loadAttachments();
                        } else {
                            toastr.error(response.message || 'Failed to delete attachment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while deleting the attachment');
                    }
                });
            }
        }

        function markAsResolved() {
            if (confirm('Are you sure you want to mark this ticket as resolved?')) {
                $.ajax({
                    url: '/Ticket/EditTicket',
                    type: 'POST',
                    data: {
                        TicketId: @Model.TicketId,
                        Title: '@Model.Title',
                        Content: '@Model.Content',
                        Category: '@Model.Category',
                        Priority: '@Model.Priority',
                        Status: 'Resolved'
                    },
                    success: function(response) {
                        if (response.success) {
                            loadUpdates();
                            showFeedbackModal();
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to resolve ticket');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while resolving the ticket');
                    }
                });
            }
        }

        function checkAndShowFeedback() {
            $.get('/Feedback/CheckFeedbackStatus', { ticketId: @Model.TicketId }, function(response) {
                if (!response.hasFeedback && '@Model.CreatedBy' === '@ViewBag.CurrentUserId') {
                    showFeedbackModal();
                }
            });
        }

        function showFeedbackModal() {
            $('#feedbackModal').modal('show');
        }

        $('#feedbackForm').submit(function(e) {
            e.preventDefault();
            var formData = {
                TicketId: @Model.TicketId,
                Rating: parseInt($('input[name="Rating"]:checked').val()),
                Remarks: $('textarea[name="Remarks"]').val()
            };

            $.ajax({
                url: '/Feedback/SubmitFeedback',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        $('#feedbackModal').modal('hide');
                        toastr.success('Thank you for your feedback!');
                    } else {
                        toastr.error(response.message || 'Failed to submit feedback');
                    }
                },
                error: function() {
                    toastr.error('An error occurred while submitting feedback');
                }
            });
        });

        
    </script>
}

    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            transition: background-color 0.4s ease;
        }

        .custom-btn {
            padding: 5px 10px;
            border: none;
            color: #fff;
            border-radius: 0.25rem;
            cursor: pointer;
            text-align: center;
        }

        .violet-btn {
            background-color: green;
        }

        .blue-btn {
            background-color: #4682b4;
        }

        .blu-btn {
            background-color: blue;
        }

        .custom-btn:hover {
            opacity: 0.9;
        }

        .custom-btn:active {
            transform: scale(0.95);
        }


    </style>
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<ASI.Basecode.Services.ServiceModels.TicketViewModel>

<div class="container mt-4">
    <h2>Tickets</h2>
    <button type="button" class="btn btn-primary mb-3" data-toggle="modal" data-target="#createTicketModal">
        Create New Ticket
    </button>

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Category</th>
                <th>Priority</th>
                <th>Status</th>
                <th>Created On</th>
                <th>Assigned To</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ticket in Model)
            {
                <tr>
                    <td>@ticket.Title</td>
                    <td>@ticket.Category</td>
                    <td>@ticket.Priority</td>
                    <td>@ticket.Status</td>
                    <td>@ticket.CreatedOn.ToString("g")</td>
                    <td>@(ticket.AssignedToName ?? "Unassigned")</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@ticket.TicketId" class="btn btn-info btn-sm">View</a>
                        <button class="btn btn-warning btn-sm" onclick="editTicket(@ticket.TicketId)">Edit</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteTicket(@ticket.TicketId)">Delete</button>
                        <button class="btn btn-primary btn-sm" onclick="showAssignModal(@ticket.TicketId)">Assign</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Create Ticket Modal -->
<div class="modal fade" id="createTicketModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Ticket</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <form id="createTicketForm">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="Title">Title</label>
                        <input name="Title" id="Title" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label for="Content">Description</label>
                        <textarea name="Content" id="Content" class="form-control" rows="4" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="Category">Category</label>
                        <select name="Category" id="Category" class="form-control" required>
                            <option value="Bug">Bug</option>
                            <option value="Feature">Feature Request</option>
                            <option value="Support">Support</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="Priority">Priority</label>
                        <select name="Priority" id="Priority" class="form-control" required>
                            <option value="1">Low</option>
                            <option value="2">Medium</option>
                            <option value="3">High</option>
                            <option value="4">Critical</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Attachments</label>
                        <input type="file" id="attachmentInput" class="form-control-file" multiple />
                        <div id="attachmentsList" class="mt-2"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Create Ticket</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Assign Ticket Modal -->
<div class="modal fade" id="assignTicketModal" tabindex="-1" role="dialog" aria-labelledby="assignTicketModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Ticket</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <form id="assignTicketForm">
                <input type="hidden" id="ticketId" name="TicketId" />
                <div class="modal-body">
                    <div class="form-group">
                        <label for="AssignedTo">Assign To</label>
                        <select name="AssignedTo" id="AssignedTo" class="form-control" required>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" onclick="removeAssignment()">Remove Assignment</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Assign</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            if (typeof $().modal === 'undefined') {
                console.error('Bootstrap modal is not loaded');
            } else {
                console.log('Bootstrap modal is loaded correctly');
            }

            let pendingAttachments = [];

            $('#attachmentInput').change(function(e) {
                const files = e.target.files;
                for (let i = 0; i < files.length; i++) {
                    pendingAttachments.push(files[i]);
                    displayPendingAttachment(files[i], pendingAttachments.length - 1);
                }
                $(this).val('');
            });

            function displayPendingAttachment(file, index) {
                const html = `
                    <div class="attachment-item d-flex justify-content-between align-items-center mb-2">
                        <span>${file.name}</span>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removePendingAttachment(${index})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                `;
                $('#attachmentsList').append(html);
            }

            function removePendingAttachment(index) {
                pendingAttachments.splice(index, 1);
                refreshPendingAttachments();
            }

            function refreshPendingAttachments() {
                $('#attachmentsList').empty();
                pendingAttachments.forEach((file, index) => {
                    displayPendingAttachment(file, index);
                });
            }

            $('#createTicketForm').submit(function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                // Add each pending attachment to the form data
                pendingAttachments.forEach(file => {
                    formData.append('attachments', file);
                });

                $.ajax({
                    url: '/Ticket/CreateTicket',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            $('#createTicketModal').modal('hide');
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to create ticket');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while creating the ticket');
                    }
                });
            });

            window.showAssignModal = function(ticketId) {
                $('#ticketId').val(ticketId);
                
                // Load agents
                $.get('/Assignment/GetAgents', function(agents) {
                    var select = $('#AssignedTo');
                    select.empty();
                    agents.forEach(function(agent) {
                        select.append($('<option></option>')
                            .val(agent.userId)
                            .text(agent.fname + ' ' + agent.lname));
                    });
                    
                    $('#assignTicketModal').modal('show');
                }).fail(function(error) {
                    toastr.error('Failed to load agents');
                });
            };
        });

        function deleteTicket(id) {
            if (confirm('Are you sure you want to delete this ticket?')) {
                $.ajax({
                    url: '/Ticket/DeleteTicket',
                    type: 'POST',
                    data: { id: id },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to delete ticket');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while deleting the ticket');
                    }
                });
            }
        }

        function editTicket(id) {
            window.location.href = '/Ticket/Details/' + id;
        }

        $('#assignTicketForm').submit(function(e) {
            e.preventDefault();
            $.ajax({
                url: '/Assignment/AssignTicket',
                type: 'POST',
                data: $(this).serialize(),
                success: function(response) {
                    if (response.success) {
                        $('#assignTicketModal').modal('hide');
                        location.reload();
                    } else {
                        toastr.error(response.message || 'Failed to assign ticket');
                    }
                },
                error: function() {
                    toastr.error('An error occurred while assigning the ticket');
                }
            });
        });

        function removeAssignment() {
            var ticketId = $('#ticketId').val();
            if (confirm('Are you sure you want to remove the current assignment?')) {
                $.ajax({
                    url: '/Assignment/RemoveAssignment',
                    type: 'POST',
                    data: { ticketId: ticketId },
                    success: function(response) {
                        if (response.success) {
                            $('#assignTicketModal').modal('hide');
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to remove assignment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while removing the assignment');
                    }
                });
            }
        }
    </script>
}

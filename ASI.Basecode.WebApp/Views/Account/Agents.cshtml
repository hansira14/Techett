@using ASI.Basecode.Services.ServiceModels
@model IEnumerable<AgentViewModel>

@{
    ViewData["Title"] = "Agents";
}
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://unpkg.com/flowbite@1.4.7/dist/flowbite.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">


<div class="py-2 px-0 bg-absolute flex items-center top-0 left-0 right-0 z-30">
    <ul class="flex items-center text-sm m-0">
        <li class="mr-2">
            <a href="#" class="text-2xl font-semibold mb-1 hover:text-gray-600 font-bold" style="color: #161571;">A G E N T S</a>
        </li>
    </ul>
    <ul class="ml-auto flex items-center">
        @await Html.PartialAsync("_Header")
    </ul>
</div>
<div class="flex flex-col h-full flex-grow min-h-[calc(100vh-85px)] mb-3">
    <div class="rounded-md col-span-3 flex-grow">
        <form id="searchForm" class="flex items-center mb-3">
            <div class="relative w-40 mr-2">
                <input type="text" id="searchInput" name="searchTerm"
                    class="py-2 pr-4 pl-10 bg-gray-50 w-full outline-none border border-gray-100 rounded-md text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                    placeholder="Search agents">
                <svg class="absolute top-1/2 left-4 -translate-y-1/2 text-gray-400 w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
            <input type="hidden" id="currentPage" name="page" value="1">
            <input type="hidden" id="pageSize" name="pageSize" value="10">
        </form>
        <div class="overflow-x-auto bg-white rounded-md shadow">
            <table class="table-auto w-full">
                <thead class="bg-gray-200">
                    <tr>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">NAME</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">EMAIL</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">TICKETS RESOLVED</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">AVG RESOLVE TIME</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">RATING</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var agent in Model)
                    {
                        <tr class="hover:bg-gray-50 border-b">
                            <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">
                                <div class="flex items-center">
                                    <img src="@(agent.ProfilePictureUrl ?? AvatarHelper.GetInitialAvatar(agent.Fname, agent.Lname))" 
                                         alt="Profile" 
                                         class="w-8 h-8 rounded-full mr-3 object-cover" />
                                    <a href="@Url.Action("Profile", "Account", new { id = agent.UserId })" 
                                       class="text-blue-600 hover:text-blue-800">
                                        @($"{agent.Fname} {agent.Lname}")
                                    </a>
                                </div>
                            </td>
                            <td class="py-2 px-4 text-sm text-gray-800">@agent.Email</td>
                            <td class="py-2 px-4 text-sm text-gray-800">@agent.TicketsResolved / @agent.TotalTicketsAssigned</td>
                            <td class="py-2 px-4 text-sm text-gray-800">
                                @(agent.AverageResolveTime.HasValue ? $"{agent.AverageResolveTime:F1} hours" : "N/A")
                            </td>
                            <td class="py-2 px-4 text-sm text-gray-800">
                                @(agent.Rating.HasValue ? $"{agent.Rating:F1} / 5.0" : "No ratings")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="pagination flex items-center justify-between mt-2.5">
                <span class="text-sm align-center text-gray-700 ml-4">1-10 of 76 results</span>
                <div class="space-x-2">
                    <button id="prevPage" onclick="changePage(-1)" class="px-3 py-2 mb-2.5 text-sm text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-300">Previous</button>
                    <button id="nextPage" onclick="changePage(1)" class="px-3 py-2 mb-2.5 mr-2 text-sm text-white hover:text-purple-600 bg-purple-400 hover:bg-purple-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-400">Next</button>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        transition: background-color 0.4s ease;
    }

    td {
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

<script>
    function loadAgents() {
        const searchData = {
            searchTerm: $('#searchInput').val(),
            page: $('#currentPage').val(),
            pageSize: $('#pageSize').val()
        };

        $.ajax({
            url: '/Account/SearchAgents',
            type: 'GET',
            data: searchData,
            beforeSend: function() {
                $('table tbody').addClass('opacity-50');
            },
            success: function(response) {
                updateTable(response);
                updatePagination(response);
            },
            error: function(xhr) {
                toastr.error('Failed to load agents: ' + (xhr.responseJSON?.message || 'Unknown error'));
            },
            complete: function() {
                $('table tbody').removeClass('opacity-50');
            }
        });
    }

    function updateTable(data) {
        const tbody = $('table tbody');
        tbody.empty();

        data.agents.forEach(agent => {
            const row = `
                <tr class="hover:bg-gray-50 border-b">
                    <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">
                        <div class="flex items-center">
                            <img src="${agent.profilePictureUrl || getInitialAvatar(agent.fname, agent.lname)}" 
                                 alt="Profile" 
                                 class="w-8 h-8 rounded-full mr-3 object-cover" />
                            <a href="/Account/Profile?id=${agent.userId}" 
                               class="text-blue-600 hover:text-blue-800">
                                ${agent.fname} ${agent.lname}
                            </a>
                        </div>
                    </td>
                    <td class="py-2 px-4 text-sm text-gray-800">${agent.email}</td>
                    <td class="py-2 px-4 text-sm text-gray-800">${agent.ticketsResolved} / ${agent.totalTicketsAssigned}</td>
                    <td class="py-2 px-4 text-sm text-gray-800">
                        ${agent.averageResolveTime ? agent.averageResolveTime.toFixed(1) + ' hours' : 'N/A'}
                    </td>
                    <td class="py-2 px-4 text-sm text-gray-800">
                        ${agent.rating ? agent.rating.toFixed(1) + ' / 5.0' : 'No ratings'}
                    </td>
                </tr>
            `;
            tbody.append(row);
        });
    }

    function updatePagination(data) {
        const startItem = ((data.currentPage - 1) * data.pageSize) + 1;
        const endItem = Math.min(data.currentPage * data.pageSize, data.totalAgents);

        $('.pagination span').text(
            data.totalAgents > 0
                ? `${startItem}-${endItem} of ${data.totalAgents} results`
                : 'No results found'
        );

        $('#prevPage').prop('disabled', data.currentPage === 1);
        $('#nextPage').prop('disabled', endItem >= data.totalAgents);
    }

    $(document).ready(function () {
        let searchTimeout;

        $('#searchForm').submit(function (e) {
            e.preventDefault();
        });

        $('#searchInput').on('input', function () {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function () {
                $('#currentPage').val(1);
                loadAgents();
            }, 500);
        });

        $('#prevPage, #nextPage').click(function (e) {
            e.preventDefault();
            const direction = $(this).attr('id') === 'prevPage' ? -1 : 1;
            const currentPage = parseInt($('#currentPage').val());
            $('#currentPage').val(currentPage + direction);
            loadAgents();
        });

        loadAgents();
    });

    function getInitialAvatar(firstName, lastName) {
        if (!firstName && !lastName) return '';
        
        const initial = (firstName ? firstName[0] : '') + (lastName ? lastName[0] : '');
        const colors = [
            "#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#34495e",
            "#16a085", "#27ae60", "#2980b9", "#8e44ad", "#2c3e50",
            "#f1c40f", "#e67e22", "#e74c3c", "#95a5a6", "#f39c12"
        ];
        
        // Generate a consistent color based on initials
        const colorIndex = Math.abs(initial.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)) % colors.length;
        const backgroundColor = colors[colorIndex];
        
        const svg = `<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'>
            <rect width='40' height='40' fill='${backgroundColor}'/>
            <text x='50%' y='50%' font-size='20' fill='white' text-anchor='middle' dy='.3em'>${initial}</text>
        </svg>`;
        
        return `data:image/svg+xml;base64,${btoa(svg)}`;
    }
</script> 
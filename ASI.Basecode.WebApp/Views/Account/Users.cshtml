@using ASI.Basecode.Services.ServiceModels
@model IEnumerable<UserViewModel>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://unpkg.com/flowbite@1.4.7/dist/flowbite.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<script src="https://unpkg.com/flowbite@1.4.7/dist/flowbite.js"></script>

@{
    ViewData["Title"] = "Users Page";
}


<div class="py-2 px-0 bg-absolute flex items-center sticky top-0 left-0 right-0 z-30">
    <ul class="flex items-center text-sm m-0">
        <li class="mr-2">
            <a href="#" class="text-2xl font-semibold mb-1 hover:text-gray-600 font-bold" style="color: #161571;">U S E
                R S</a>
        </li>
    </ul>
    <ul class="ml-auto flex items-center">
        @await Html.PartialAsync("_Header")
    </ul>
</div>
<div class="flex flex-col h-full flex-grow min-h-[calc(100vh-85px)] mb-3">
    <div class="rounded-md col-span-3 flex-grow ">
        <form id="searchForm" class="flex items-center mb-3">
            <div class="relative w-40 mr-2">
                <input type="text" id="searchInput" name="searchTerm"
                    class="py-2 pr-4 pl-10 bg-gray-50 w-full outline-none border border-gray-100 rounded-md text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                    placeholder="Search users">
                <svg class="absolute top-1/2 left-4 -translate-y-1/2 text-gray-400 w-4 h-4"
                    xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
            <div class="relative mr-2">
                <button type="button" id="filterButton"
                    class="py-2 px-4 bg-gray-50 border border-gray-100 rounded-md text-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-500 hover:bg-gray-100 flex items-center">
                    <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                    </svg>
                    Filter Roles
                </button>

                <div id="filterDropdown"
                    class="hidden absolute left-0 mt-2 w-64 bg-white rounded-md shadow-lg z-50 p-4">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Roles</label>
                        <div class="space-y-2">

                            <label class="flex items-center">
                                <input type="checkbox" name="roles" value="SuperAdmin" class="mr-2 role-checkbox">
                                SuperAdmin
                            </label>
                            <label class="flex items-center">
                                <input type="checkbox" name="roles" value="Admin" class="mr-2 role-checkbox">
                                Admin
                            </label>


                            <label class="flex items-center">
                                <input type="checkbox" name="roles" value="Agent" class="mr-2 role-checkbox">
                                Agent
                            </label>

                            <label class="flex items-center">
                                <input type="checkbox" name="roles" value="User" class="mr-2 role-checkbox">
                                User
                            </label>
                        </div>
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button type="button" id="clearFilters"
                            class="px-4 py-2 text-gray-600 bg-gray-100 rounded-md hover:bg-gray-200">
                            Clear Filters
                        </button>
                        <button type="button" id="applyFilters"
                            class="px-4 py-2 bg-purple-400 text-white rounded-md hover:bg-purple-600">
                            Apply Filters
                        </button>
                    </div>
                </div>
            </div>
            <button type="button" 
                    data-toggle="modal" 
                    data-target="#createUserModal"
                    class="py-2 px-4 bg-purple-400 text-white rounded-md text-sm hover:bg-purple-600 transition duration-300 ease-in-out flex items-center">
                <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Create User
            </button>
            <input type="hidden" id="currentPage" name="page" value="1">
            <input type="hidden" id="pageSize" name="pageSize" value="12">
        </form>
        <div class="overflow-x-auto bg-white rounded-md shadow">
            <table class="table-auto w-full">

                <thead class="bg-gray-200">
                    <tr>
                        <th></th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">NAME</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">EMAIL</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">ROLE</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">TEAM</th>
                        <th class="py-3 px-4 text-left text-sm font-medium text-gray-600">STATUS</th>
                        <th class="py-3 px-4 text-center text-sm font-medium text-gray-600">ACTIONS</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr class="hover:bg-gray-50 border-b">
                            <td class="py-2 px-3 text-sm">
                                <input type="checkbox" id="user-@user.UserId" class="checkbox">
                            </td>
                            <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">
                                <div class="flex items-center">
                                    <img src="@(user.ProfilePictureUrl ?? AvatarHelper.GetInitialAvatar(user.Fname, user.Lname))" 
                                         alt="Profile" 
                                         class="w-8 h-8 rounded-full mr-3 object-cover" />
                                    <a href="@Url.Action("Profile", "Account", new { id = user.UserId })"
                                       class="text-blue-600 hover:text-blue-800">@($"{user.Fname} {user.Lname}")</a>
                                </div>
                            </td>
                            <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">@user.Email</td>
                            <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[150px]">@user.Role</td>
                            <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[150px]">@user.TeamName</td>
                            <td class="py-2 px-4 text-sm text-gray-800">
                                <span class="px-2 py-1 rounded-full text-white text-xs font-medium
                            @(user.IsActive ? "bg-purple-400" : "bg-red-400")">
                                    @(user.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="py-2 px-4 text-center">
                                <button onclick="editUser(@user.UserId)" class="text-orange-600 hover:text-orange-800 mr-2">
                                    <svg class="w-4 h-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                    </svg>
                                </button>
                                <button onclick="deleteUser(@user.UserId)" class="text-red-600 hover:text-red-800">
                                    <svg class="w-4 h-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none"
                                        viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>

                            </td>

                        </tr>

                    }

                </tbody>

            </table>
            <div class="pagination flex items-center justify-between mt-2.5">
                <span class="text-sm align-center text-gray-700 ml-4" id="paginationInfo">
                    Showing 0 of 0 results
                </span>
                <div class="space-x-2">
                    <button id="prevPage" 
                            class="px-3 py-2 mb-2.5 text-sm text-gray-600 bg-gray-100 hover:bg-gray-200 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-300"
                            disabled>
                        Previous
                    </button>
                    <button id="nextPage" 
                            class="px-3 py-2 mb-2.5 mr-2 text-sm text-white hover:text-purple-600 bg-purple-400 hover:bg-purple-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-400"
                            disabled>
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Create User Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1">
    <div class="modal-dialog modal-lg max-w-md mx-auto">
        <div class="modal-content rounded-lg shadow-xl">
            <div
                class="modal-header text-center bg-gradient-to-r from-blue-100 to-purple-700 rounded-t-lg p-4 d-flex justify-content-center align-items-center position-relative">
                <h5 class="modal-title text-2xl font-bold text-center text-indigo-900">Create User Account</h5>
                <button type="button" class="close position-absolute" data-dismiss="modal"
                    style="top: 10px; right: 10px;">
                    <span>&times;</span>
                </button>
            </div>
            <form id="createUserForm" asp-action="CreateUser" method="post">
                <div class="modal-body p-6 space-y-4">
                    <div class="form-group">
                        <label for="Fname" class="block text-sm font-medium text-indigo-700 mb-1">First Name</label>
                        <input name="Fname" id="Fname"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="Lname" class="block text-sm font-medium text-indigo-700 mb-1">Last Name</label>
                        <input name="Lname" id="Lname"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="Email" class="block text-sm font-medium text-indigo-700 mb-1">Email</label>
                        <input name="Email" id="Email" type="email"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="Password" class="block text-sm font-medium text-indigo-700 mb-1">Password</label>
                        <input name="Password" id="Password" type="password"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="ConfirmPassword" class="block text-sm font-medium text-indigo-700 mb-1">Confirm
                            Password</label>
                        <input name="ConfirmPassword" id="ConfirmPassword" type="password"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="Role" class="block text-sm font-medium text-indigo-700 mb-1">Role</label>
                        <select name="Role" id="Role"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;">
                            @if (User.HasClaim(c => c.Type == System.Security.Claims.ClaimTypes.Role &&
                            c.Value.Equals("SuperAdmin", StringComparison.OrdinalIgnoreCase)))
                            {
                                <option value="Admin">Admin</option>
                            }
                            @if (User.HasClaim(c => c.Type == System.Security.Claims.ClaimTypes.Role &&
                            (c.Value.Equals("SuperAdmin", StringComparison.OrdinalIgnoreCase) ||
                            c.Value.Equals("Admin", StringComparison.OrdinalIgnoreCase))))
                            {
                                <option value="Agent">Agent</option>
                            }
                            <option value="User">User</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer p-6 pt-0 flex justify-end space-x-4 mt-3 mb-0">
                    <button type="button"
                        class="btn px-4 py-2 text-gray-700 mt-3 rounded-md focus:outline-none, focus:ring"
                        style="padding: 5px 10px; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);"
                        data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn text-[#161571] rounded-md mt-3 hover:bg-[#BCC5FF]"
                        style="background-color: #D1D7FF; padding: 5px 10px;">Create User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1">
    <div class="modal-dialog modal-lg max-w-md mx-auto">
        <div class="modal-content rounded-lg shadow-xl">
            <div
                class="modal-header text-center bg-gradient-to-r from-blue-100 to-purple-700 rounded-t-lg p-4 d-flex justify-content-center align-items-center position-relative">
                <h5 class="modal-title text-2xl font-bold text-center text-indigo-900">Edit User</h5>
                <button type="button" class="close position-absolute" data-dismiss="modal"
                    style="top: 10px; right: 10px;">
                    <span>&times;</span>
                </button>
            </div>
            <form id="editUserForm" asp-action="EditUser" method="post">
                <input type="hidden" id="editUserId" name="UserId" />
                <div class="modal-body p-6 space-y-4">
                    <div class="form-group">
                        <label for="editFname" class="block text-sm font-medium text-indigo-700 mb-1">First Name</label>
                        <input name="Fname" id="editFname"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;"
                            required />
                    </div>
                    <div class="form-group">
                        <label for="editLname" class="block text-sm font-medium text-indigo-700 mb-1">Last Name</label>
                        <input name="Lname" id="editLname"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;"
                            required />
                    </div>
                    <div class="form-group">
                        <label for="editEmail" class="block text-sm font-medium text-indigo-700 mb-1">Email</label>
                        <input name="Email" id="editEmail" type="email"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;"
                            required />
                    </div>
                    <div class="form-group">
                        <label for="editPassword"
                            class="block text-sm font-medium text-indigo-700 mb-1">Password</label>
                        <input name="Password" id="editPassword" type="password"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="editConfirmPassword" class="block text-sm font-medium text-indigo-700 mb-1">Confirm
                            Password</label>
                        <input name="ConfirmPassword" id="editConfirmPassword" type="password"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;" />
                    </div>
                    <div class="form-group">
                        <label for="editRole" class="block text-sm font-medium text-indigo-700 mb-1">Role</label>
                        <select name="Role" id="editRole"
                            class="form-control w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            required
                            style="box-shadow: 0 4px 8px rgba(126, 142, 241, 0.5), 0 0 15px rgba(126, 142, 241, 0.2); color: #161571;"
                            required>
                            @if (User.HasClaim(c => c.Type == System.Security.Claims.ClaimTypes.Role &&
                            c.Value.Equals("SuperAdmin", StringComparison.OrdinalIgnoreCase)))
                            {
                                <option value="Admin">Admin</option>
                            }
                            @if (User.HasClaim(c => c.Type == System.Security.Claims.ClaimTypes.Role &&
                            (c.Value.Equals("SuperAdmin", StringComparison.OrdinalIgnoreCase) ||
                            c.Value.Equals("Admin", StringComparison.OrdinalIgnoreCase))))
                            {
                                <option value="Agent">Agent</option>
                            }
                            <option value="User">User</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer p-6 pt-0 flex justify-end space-x-4 mt-3 mb-0">
                    <button type="button"
                        class="btn px-4 py-2 text-gray-700 mt-3 rounded-md focus:outline-none, focus:ring"
                        style="padding: 5px 10px; text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);"
                        data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn text-[#161571] rounded-md mt-3 hover:bg-[#BCC5FF]"
                        style="background-color: #D1D7FF; padding: 5px 10px;">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Move deleteUser function to global scope
        function deleteUser(id) {
            if (confirm('Are you sure you want to delete this user?')) {
                console.log('Current user claims:', document.cookie);

                $.ajax({
                    url: '/Account/DeleteUser/' + id,
                    type: 'DELETE',
                    success: function (response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            console.log('Error details:', response);
                            toastr.error(response.message || 'Failed to delete user');
                        }
                    },
                    error: function (xhr) {
                        console.log('Error details:', xhr);
                        toastr.error('An error occurred while deleting the user');
                    }
                });
            }
        }
        function editUser(id) {
            $.get('/Account/GetUserDetails/' + id, function (user) {
                $('#editUserId').val(user.userId);
                $('#editFname').val(user.fname);
                $('#editLname').val(user.lname);
                $('#editEmail').val(user.email);
                $('#editRole').val(user.role);
                $('#editUserModal').modal('show');
            }).fail(function () {
                toastr.error('Failed to load user details');
            });
        }

        $(document).ready(function () {
            $('#editUserForm').validate({
                rules: {
                    Fname: "required",
                    Lname: "required",
                    Email: {
                        required: true,
                        email: true
                    },
                    Password: {
                        required: false,
                        minlength: {
                            param: 6,
                            depends: function (element) {
                                return $(element).val().length > 0;
                            }
                        }
                    },
                    ConfirmPassword: {
                        required: false,
                        equalTo: {
                            param: "#editPassword",
                            depends: function (element) {
                                return $("#editPassword").val().length > 0;
                            }
                        }
                    },
                    Role: "required"
                },
                messages: {
                    Password: {
                        minlength: "Password must be at least 6 characters"
                    },
                    ConfirmPassword: {
                        equalTo: "Passwords do not match"
                    }
                },
                submitHandler: function (form) {
                    $.ajax({
                        url: form.action,
                        type: 'POST',
                        data: $(form).serialize(),
                        success: function (response) {
                            if (response.success) {
                                $('#editUserModal').modal('hide');
                                location.reload();
                            } else {
                                toastr.error(response.message || 'Failed to update user');
                            }
                        },
                        error: function (xhr) {
                            toastr.error(xhr.responseJSON?.message || 'An error occurred while updating the user');
                        }
                    });
                    return false;
                }
            });
        });
        $(document).ready(function () {
            $('#createUserForm').validate({
                rules: {
                    Fname: "required",
                    Lname: "required",
                    Email: {
                        required: true,
                        email: true
                    },
                    Password: {
                        required: true,
                        minlength: 6
                    },
                    ConfirmPassword: {
                        required: true,
                        equalTo: "#Password"
                    },
                    Role: "required"
                },
                messages: {
                    ConfirmPassword: {
                        equalTo: "Passwords do not match"
                    }
                },
                submitHandler: function (form) {
                    $.ajax({
                        url: form.action,
                        type: 'POST',
                        data: $(form).serialize(),
                        success: function (response) {
                            if (response.success) {
                                $('#createUserModal').modal('hide');
                                toastr.success(response.message, "Success");

                                window.location.href = '/Account/Users';
                            } else {
                                toastr.error(response.message || 'Failed to create user');
                            }
                        },
                        error: function (xhr) {
                            toastr.error(xhr.responseJSON?.message || 'An error occurred while creating the user');
                        }
                    });
                    return false;
                }
            });
        });
    </script>
    <script>
        // Define loadUsers in global scope
        function loadUsers() {
            const selectedRoles = [];
            $('.role-checkbox:checked').each(function () {
                selectedRoles.push($(this).val());
            });

            const searchData = {
                searchTerm: $('#searchInput').val(),
                page: $('#currentPage').val(),
                pageSize: $('#pageSize').val(),
                roles: selectedRoles
            };

            $.ajax({
                url: '/Account/SearchUsers',
                type: 'GET',
                data: searchData,
                traditional: true,
                beforeSend: function() {
                    $('table tbody').addClass('opacity-50');
                },
                success: function(response) {
                    updateTable(response);
                    updatePagination(response);
                },
                error: function(xhr) {
                    toastr.error('Failed to load users: ' + (xhr.responseJSON?.message || 'Unknown error'));
                },
                complete: function() {
                    $('table tbody').removeClass('opacity-50');
                }
            });
        }

        // Define helper functions in global scope
        function updateTable(data) {
            const tbody = $('table tbody');
            tbody.empty();

            data.users.forEach(user => {
                const row = createUserRow(user);
                tbody.append(row);
            });
        }

        function updatePagination(data) {
            const startItem = ((data.currentPage - 1) * data.pageSize) + 1;
            const endItem = Math.min(data.currentPage * data.pageSize, data.totalUsers);

            $('.pagination span').text(
                data.totalUsers > 0
                    ? `${startItem}-${endItem} of ${data.totalUsers} results`
                    : 'No results found'
            );

            $('#prevPage').prop('disabled', data.currentPage === 1);
            $('#nextPage').prop('disabled', endItem >= data.totalUsers);

            if (data.totalUsers === 0) {
                $('.pagination').hide();
            } else {
                $('.pagination').show();
            }
        }

        function createUserRow(user) {
            return `
                    <tr class="hover:bg-gray-50 border-b">
                        <td class="py-2 px-3 text-sm">
                            <input type="checkbox" id="user-${user.userId}" class="checkbox">
                        </td>
                        <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">
                            <div class="flex items-center">
                                <img src="${user.profilePictureUrl || getInitialAvatar(user.fname, user.lname)}" 
                                     alt="Profile" 
                                     class="w-8 h-8 rounded-full mr-3 object-cover" />
                                <a href="/Account/Profile?id=${user.userId}" 
                                   class="text-blue-600 hover:text-blue-800">
                                    ${user.fname} ${user.lname}
                                </a>
                            </div>
                        </td>
                        <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[200px]">${user.email}</td>
                        <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[150px]">${user.role}</td>
                        <td class="py-2 px-4 text-sm text-gray-800 truncate max-w-[150px]">${user.teamName}</td>
                        <td class="py-2 px-4 text-sm text-gray-800">
                            <span class="px-2 py-1 rounded-full text-white text-xs font-medium ${user.isActive ? 'bg-purple-400' : 'bg-red-400'}">
                                ${user.isActive ? 'Active' : 'Inactive'}
                            </span>
                        </td>
                        <td class="py-2 px-4 text-center">

                            <button onclick="editUser(${user.userId})" class="text-orange-600 hover:text-orange-800 mr-2">
                                <svg class="w-4 h-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                </svg>
                            </button>
                            <button onclick="deleteUser(${user.userId})" class="text-red-600 hover:text-red-800">
                                <svg class="w-4 h-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </td>
                    </tr>
                `;
        }

        $(document).ready(function () {
            let searchTimeout;

            $('#searchForm').submit(function (e) {
                e.preventDefault();
            });

            $('#searchInput').on('input', function () {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function () {
                    $('#currentPage').val(1);
                    loadUsers();
                }, 500);
            });

            $('#prevPage, #nextPage').click(function (e) {
                e.preventDefault();
                const direction = $(this).attr('id') === 'prevPage' ? -1 : 1;
                const currentPage = parseInt($('#currentPage').val());
                $('#currentPage').val(currentPage + direction);
                loadUsers();
            });

            loadUsers();
        });
        // Filter dropdown toggle
        $('#filterButton').click(function (e) {
            e.stopPropagation();
            $('#filterDropdown').toggleClass('hidden');
        });

        // Close dropdown when clicking outside
        $(document).click(function (e) {
            if (!$(e.target).closest('#filterButton, #filterDropdown').length) {
                $('#filterDropdown').addClass('hidden');
            }
        });

        // Apply filters button click
        $('#applyFilters').click(function() {
            $('#currentPage').val(1); // Reset to first page when applying filters
            loadUsers();
            $('#filterDropdown').addClass('hidden');
        });

        // Clear filters button click
        $('#clearFilters').click(function() {
            // Uncheck all role checkboxes
            $('.role-checkbox').prop('checked', false);
            
            // Reset to first page
            $('#currentPage').val(1);
            
            // Reload users
            loadUsers();
            
            // Close dropdown
            $('#filterDropdown').addClass('hidden');
        });
        // Prevent dropdown from closing when clicking inside it
        $('#filterDropdown').click(function (e) {
            e.stopPropagation();
        });
    </script>
}

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        transition: background-color 0.4s ease;
    }

    .dropdown .container {
        width: 300px;
        max-height: 400px;
        overflow-y: auto;
    }

    .table-column {
        width: 15%;
    }

    .title-column {
        word-wrap: break-word;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 120px;
    }

    .table-cell {
        word-wrap: break-word;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    td {
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .checkbox {
        outline: none;
        border-color: #D1D7FF;
        appearance: none;
        width: 10px;
        height: 10px;
        cursor: pointer;
    }
</style>

<script>
    function getInitialAvatar(firstName, lastName) {
        if (!firstName && !lastName) return '';
        
        const initial = (firstName ? firstName[0] : '') + (lastName ? lastName[0] : '');
        const colors = [
            "#1abc9c", "#2ecc71", "#3498db", "#9b59b6", "#34495e",
            "#16a085", "#27ae60", "#2980b9", "#8e44ad", "#2c3e50",
            "#f1c40f", "#e67e22", "#e74c3c", "#95a5a6", "#f39c12"
        ];
        
        const colorIndex = Math.abs(initial.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)) % colors.length;
        const backgroundColor = colors[colorIndex];
        
        const svg = `<svg xmlns='http://www.w3.org/2000/svg' width='40' height='40'>
            <rect width='40' height='40' fill='${backgroundColor}'/>
            <text x='50%' y='50%' font-size='20' fill='white' text-anchor='middle' dy='.3em'>${initial}</text>
        </svg>`;
        
        return `data:image/svg+xml;base64,${btoa(svg)}`;
    }
</script>
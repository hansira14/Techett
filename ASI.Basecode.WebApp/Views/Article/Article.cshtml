@using System.Collections.Generic
@model ArticleDetailViewModel

<div class="article-container">
    <div id="viewMode">
        <h2>@Model.Article.Title</h2>
        <div class="article-meta">
            <span class="meta-item">Created by: @Model.Article.CreatedByName</span>
            <span class="meta-item">Created on: @Model.Article.CreatedOn.ToString("g")</span>
        </div>
        
        <div class="article-content mt-4 p-4 bg-light border rounded">
            @Model.Article.Content
        </div>

        <div class="attachments-section mt-4">
            <h4>Attachments</h4>
            <div class="mb-3">
                <input type="file" id="attachmentInput" class="d-none" multiple />
                <button class="btn btn-primary btn-sm" onclick="$('#attachmentInput').click()">
                    <i class="fas fa-plus"></i> Add Attachments
                </button>
            </div>
            <div id="attachmentsList">
                <!-- Attachments will be loaded here -->
            </div>
        </div>

        <div class="article-actions mt-3">
            <button type="button" class="btn btn-primary" onclick="toggleEditMode()">Edit</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </div>

    <div id="editMode" style="display: none;">
        <form id="editArticleForm">
            <input type="hidden" name="ArticleId" value="@Model.Article.ArticleId" />
            <div class="form-group">
                <label for="Title">Title</label>
                <input type="text" class="form-control" id="Title" name="Title" value="@Model.Article.Title" required>
            </div>
            <div class="form-group">
                <label for="Content">Content</label>
                <textarea class="form-control" id="Content" name="Content" rows="10" required>@Model.Article.Content</textarea>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" onclick="toggleEditMode()">Cancel</button>
            </div>
        </form>
    </div>

    <h3 class="mt-4">Version History</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Version Date</th>
                <th>Title</th>
                <th>Modified By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var version in Model.Versions)
            {
                <tr style="cursor: pointer;" onclick="showVersionDetails(@version.VersionId)">
                    <td>@version.VersionDate.ToString("g")</td>
                    <td>@version.Title</td>
                    <td>@version.VersionedByName</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Version Details Modal -->
    <div class="modal fade" id="versionDetailsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Article Version</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="version-meta mb-3">
                        <h4 id="versionTitle" class="mb-3"></h4>
                        <small class="text-muted">
                            Modified by <span id="versionAuthor"></span> on <span id="versionDate"></span>
                        </small>
                    </div>
                    <div class="version-content mt-4">
                        <div id="versionContent" class="bg-light p-3 rounded"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="restoreVersion()">Restore This Version</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleEditMode() {
            $('#viewMode').toggle();
            $('#editMode').toggle();
        }

        $(document).ready(function() {
            $('#editArticleForm').submit(function(e) {
                e.preventDefault();
                $.ajax({
                    url: '/Article/Edit',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to update article');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while updating the article');
                    }
                });
            });
        });

        let currentVersionId = null;

        function showVersionDetails(versionId) {
            currentVersionId = versionId;
            
            $.ajax({
                url: '/ArticleVersion/GetVersion',
                type: 'GET',
                data: { versionId: versionId },
                success: function(version) {
                    console.log('Version details:', version);
                    
                    $('#versionTitle').text(version.title);
                    $('#versionContent').text(version.content);
                    $('#versionAuthor').text(version.versionedByName);
                    
                    const date = new Date(version.versionDate);
                    if (!isNaN(date)) {
                        $('#versionDate').text(date.toLocaleString());
                    }
                    
                    $('#versionDetailsModal').modal('show');
                },
                error: function(xhr, status, error) {
                    console.error('Error details:', error);
                    toastr.error('Failed to load version details');
                }
            });
        }

        function restoreVersion() {
            if (!currentVersionId) return;

            if (confirm('Are you sure you want to restore this version? This will create a new version with this content.')) {
                $.ajax({
                    url: '/ArticleVersion/RestoreVersion',
                    type: 'POST',
                    data: { versionId: currentVersionId },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to restore version');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while restoring the version');
                    }
                });
            }
        }

        function loadAttachments() {
            $.get('/ArticleAttachment/GetArticleAttachments', { articleId: @Model.Article.ArticleId }, function(attachments) {
                var html = '';
                attachments.forEach(function(attachment) {
                    const isImage = attachment.filetype.startsWith('image/');
                    
                    html += `
                        <div class="attachment-item mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    ${isImage ? 
                                        `<div class="mr-3">
                                            <img src="${attachment.source}" alt="${attachment.filename}" 
                                                 style="max-width: 150px; max-height: 150px; object-fit: contain;" 
                                                 class="img-thumbnail"/>
                                        </div>` : 
                                        `<i class="fas fa-paperclip mr-2"></i>`
                                    }
                                    <div>
                                        <a href="${attachment.source}" target="_blank" class="text-decoration-none">
                                            ${attachment.filename}
                                        </a>
                                        <small class="text-muted d-block">${formatFileSize(attachment.filesize)}</small>
                                    </div>
                                </div>
                                <button class="btn btn-danger btn-sm" onclick="deleteAttachment(${attachment.attachmentId})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    `;
                });
                $('#attachmentsList').html(html || '<p>No attachments</p>');
            });
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        $('#attachmentInput').change(function(e) {
            const files = e.target.files;
            if (files.length > 0) {
                const formData = new FormData();
                formData.append('articleId', @Model.Article.ArticleId);
                
                for (let i = 0; i < files.length; i++) {
                    formData.append('file', files[i]);
                }

                $.ajax({
                    url: '/ArticleAttachment/Upload',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            loadAttachments();
                            $(this).val('');
                        } else {
                            toastr.error(response.message || 'Failed to upload attachment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while uploading the attachment');
                    }
                });
            }
        });

        function deleteAttachment(attachmentId) {
            if (confirm('Are you sure you want to delete this attachment?')) {
                $.ajax({
                    url: '/ArticleAttachment/Delete',
                    type: 'POST',
                    data: { attachmentId: attachmentId },
                    success: function(response) {
                        if (response.success) {
                            loadAttachments();
                        } else {
                            toastr.error(response.message || 'Failed to delete attachment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while deleting the attachment');
                    }
                });
            }
        }

        // Call loadAttachments when the page loads
        $(document).ready(function() {
            loadAttachments();
        });
    </script>
}

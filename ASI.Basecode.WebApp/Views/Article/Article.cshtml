@using System.Collections.Generic
@model ArticleDetailViewModel
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link href="https://unpkg.com/flowbite@1.4.7/dist/flowbite.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
<script src="https://unpkg.com/flowbite@1.4.7/dist/flowbite.js"></script>

<div class="container mx-auto px-4 py-8">
    <div class="space-y-6">
        <!-- Article Content -->
        <div class="bg-white rounded-md shadow-md">
            <div class="bg-purple-400 text-white py-4 px-6 rounded-t-md">
                <h2 class="text-2xl font-bold">@Model.Article.Title</h2>
            </div>
            <div class="p-6">
                <div id="viewMode">
                    <div class="mb-4 text-sm text-gray-500">
                        <p>Created by: @Model.Article.CreatedByName</p>
                        <p>Created on: @Model.Article.CreatedOn.ToString("g")</p>
                    </div>
                    <div class="prose max-w-none mb-6">
                        @Html.Raw(Model.Article.Content)
                    </div>
                    <div class="flex justify-end space-x-2">
                        <button onclick="toggleEditMode()" class="bg-purple-400 text-white py-2 px-4 rounded font-bold hover:bg-purple-600">
                            <i class="ri-edit-line mr-2"></i>Edit
                        </button>
                        <a asp-action="Index" class="bg-gray-300 text-gray-700 py-2 px-4 rounded font-bold hover:bg-gray-400">
                            <i class="ri-arrow-left-line mr-2"></i>Back to List
                        </a>
                    </div>
                </div>

                <div id="editMode" style="display: none;" class="flex flex-col h-full">
                    <form id="editArticleForm" class="flex flex-col h-full">
                        <input type="hidden" name="ArticleId" value="@Model.Article.ArticleId" />
                        <div>
                            <label for="Title" class="block text-sm font-medium text-gray-700">Title</label>
                            <input id="Title" name="Title" value="@Model.Article.Title" class="mt-1 block w-full rounded-md border-gray-300 border-2 border-purple-400 focus:border-purple-500 focus:ring focus:ring-purple-200" required />
                        </div>
                        <div>
                            <label for="Content" class="block text-sm font-medium text-gray-700">Content</label>
                            <textarea id="Content" name="Content" rows="10" class="mt-1 block w-full rounded-md border-gray-300" required>@Model.Article.Content</textarea>
                        </div>
                        <div class="mt-3 flex justify-end space-x-2">
                            <button type="button" onclick="saveArticle()" class="bg-purple-400 text-white py-2 px-4 rounded hover:bg-purple-600">
                                <i class="ri-save-line mr-2"></i>Save
                            </button>
                            <button type="button" onclick="toggleEditMode()" class="bg-gray-300 text-gray-700 py-2 px-4 rounded hover:bg-gray-400">
                                <i class="ri-close-line mr-2"></i>Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Attachments section -->
        <div class="bg-white rounded-md shadow-md">
            <div class="bg-purple-400 text-white py-4 px-6 rounded-t-md flex justify-between items-center">
                <h3 class="text-xl font-bold">Attachments</h3>
                <div>
                    <input type="file" id="attachmentInput" class="hidden" multiple />
                    <button onclick="document.getElementById('attachmentInput').click()" class="bg-white text-purple-600 py-2 px-4 rounded font-bold hover:bg-gray-100">
                        <i class="ri-attachment-2 mr-2"></i>Add Attachments
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div id="attachmentsList" class="space-y-4">
                    <!-- Attachments will be loaded here via JavaScript -->
                </div>
            </div>
        </div>

        <!-- Version History section -->
        <div class="bg-white rounded-md shadow-md">
            <div class="bg-purple-400 text-white py-4 px-6 rounded-t-md">
                <h3 class="text-xl font-bold">Version History</h3>
            </div>
            <div class="p-6 overflow-x-auto">
                <table class="w-full">
                    <thead>
                        <tr>
                            <th class="text-left">Version Date</th>
                            <th class="text-left">Title</th>
                            <th class="text-left">Modified By</th>
                            <th class="text-left">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var version in Model.Versions)
                        {
                            <tr>
                                <td>@version.VersionDate.ToString("g")</td>
                                <td>@version.Title</td>
                                <td>@version.VersionedByName</td>
                                <td>
                                    <button onclick="showVersionDetails(@version.VersionId)" class="text-purple-600 hover:text-purple-800">View</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Version Details Modal -->
<div id="versionDetailsModal" class="fixed z-10 inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                    Article Version
                </h3>
                <div class="mt-2">
                    <p class="text-sm text-gray-500">
                        Modified by <span id="versionAuthor"></span> on <span id="versionDate"></span>
                    </p>
                    <div class="mt-4 prose max-w-none">
                        <div id="versionContent"></div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" onclick="restoreVersion()" class="modal-button bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500">
                    Restore This Version
                </button>
                <button type="button" onclick="closeVersionModal()" class="modal-button bg-white text-gray-700 hover:bg-gray-50 focus:ring-indigo-500">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-button {
        width: 100%;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        border-radius: 0.375rem;
        border: 1px solid transparent;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .modal-button:hover {
            cursor: pointer;
        }

        .modal-button:first-child {
            margin-left: 0;
        }

    .sm\:modal-button {
        width: auto;
    }
</style>

@section Scripts {
    <script>
        function toggleEditMode() {
            $('#viewMode').toggle();
            $('#editMode').toggle();
            if ($('#editMode').is(':visible')) {
                $('#editArticleForm').addClass('flex flex-col h-full');
            } else {
                $('#editArticleForm').removeClass('flex flex-col h-full');
            }
        }

        function loadAttachments() {
            $.get('/ArticleAttachment/GetArticleAttachments', { articleId: @Model.Article.ArticleId }, function(attachments) {
                var html = '';
                attachments.forEach(function(attachment) {
                    const isImage = attachment.filetype.startsWith('image/');

                    html += `
                        <div class="flex items-center justify-between bg-gray-100 p-3 rounded-md">
                            <div class="flex items-center space-x-3">
                                <i class="ri-attachment-2 text-gray-500"></i>
                                <div>
                                    <a href="${attachment.source}" target="_blank" class="text-blue-600 hover:underline">${attachment.filename}</a>
                                    <p class="text-sm text-gray-500">${formatFileSize(attachment.filesize)}</p>
                                </div>
                            </div>
                            <button onclick="deleteAttachment(${attachment.attachmentId})" class="text-red-600 hover:text-red-800">
                                <i class="ri-delete-bin-line"></i>
                            </button>
                        </div>
                    `;
                });
                $('#attachmentsList').html(html || '<p>No attachments</p>');
            });
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        $('#attachmentInput').change(function(e) {
            const files = e.target.files;
            if (files.length > 0) {
                const formData = new FormData();
                formData.append('articleId', @Model.Article.ArticleId);

                for (let i = 0; i < files.length; i++) {
                    formData.append('file', files[i]);
                }

                $.ajax({
                    url: '/ArticleAttachment/Upload',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(response) {
                        if (response.success) {
                            toastr.success('Attachment uploaded successfully');
                            loadAttachments();
                            $(this).val('');
                        } else {
                            toastr.error(response.message || 'Failed to upload attachment');
                        }
                    },
                    error: function() {
                        toastr.error('An error occurred while uploading the attachment');
                    }
                });
            }
        });

        function saveArticle() {
                const data = $('#editArticleForm').serialize();
                $.ajax({
                    url: '/Article/Edit',
                    type: 'POST',
                    data: data,
                    success: function (response) {
                        if (response.success) {
                            toastr.success('Article saved successfully');
                            location.reload();
                        } else {
                            toastr.error(response.message || 'Failed to save article');
                        }
                    },
                    error: function () {
                        toastr.error('An error occurred while saving the article');
                    }
                });
            }

        function deleteAttachment(attachmentId) {
            toastr.warning(
                "Are you sure you want to delete this attachment?",
                "Confirm Deletion",
                {
                    closeButton: true,
                    timeOut: 0,
                    extendedTimeOut: 0,
                    onclick: function() {
                        $.ajax({
                            url: '/ArticleAttachment/Delete',
                            type: 'POST',
                            data: { attachmentId: attachmentId },
                            success: function(response) {
                                if (response.success) {
                                    toastr.success('Attachment deleted successfully');
                                    loadAttachments();
                                } else {
                                    toastr.error(response.message || 'Failed to delete attachment');
                                }
                            },
                            error: function() {
                                toastr.error('An error occurred while deleting the attachment');
                            }
                        });
                    }
                }
            );
        }

        function showVersionDetails(versionId) {
            currentVersionId = versionId;
            $.ajax({
                url: '/ArticleVersion/GetVersion',
                type: 'GET',
                data: { versionId: versionId },
                success: function (version) {
                    $('#versionAuthor').text(version.versionedByName);
                    $('#versionDate').text(new Date(version.versionDate).toLocaleString());
                    $('#versionContent').html(version.content);
                    $('#versionDetailsModal').removeClass('hidden');
                },
                error: function () {
                    toastr.error('Failed to load version details');
                }
            });
        }


        function closeVersionModal() {
            $('#versionDetailsModal').addClass('hidden');
        }

    function restoreVersion() {
        const versionId = currentVersionId;
        if (!versionId) return;

        toastr.warning(
            "Are you sure you want to restore this version? This will create a new version with this content.",
            "Confirm Restoration",
            {
                closeButton: true,
                timeOut: 0,
                extendedTimeOut: 0,
                onclick: function() {
                    $.ajax({
                        url: '/ArticleVersion/RestoreVersion',
                        type: 'POST',
                        data: { versionId: versionId },
                        success: function (response) {
                            if (response.success) {
                                toastr.success('Version restored successfully');
                                location.reload();
                            } else {
                                toastr.error(response.message || 'Failed to restore version');
                            }
                        },
                        error: function () {
                            toastr.error('An error occurred while restoring the version');
                        }
                    });
                }
            }
        );
    }

        $(document).ready(function() {
            loadAttachments();
        });
    </script>
}
<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        transition: background-color 0.4s ease;
    }
</style>